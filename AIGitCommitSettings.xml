<application>
  <component name="com.hmydk.aigit.config.ApiKeySettings">
    <option name="customPrompts">
      <list>
        <PromptInfo>
          <option name="description" value="Default" />
          <option name="prompt" value="You are an AI assistant tasked with generating a Git commit message based on the provided code changes. Your goal is to create a clear, concise, and informative commit message that follows best practices.&#10;&#10;Input:&#10;- Code diff:&#10;```&#10;{diff}&#10;```&#10;&#10;Instructions:&#10;1. Analyze the provided code diff and branch name.&#10;2. Generate a commit message following this format:&#10;   - First line: A short, imperative summary (50 characters or less)&#10;   - Blank line&#10;   - Detailed explanation (if necessary), wrapped at 72 characters&#10;3. The commit message should:&#10;   - Be clear and descriptive&#10;   - Use the imperative mood in the subject line (e.g., &quot;Add feature&quot; not &quot;Added feature&quot;)&#10;   - Explain what and why, not how&#10;   - Reference relevant issue numbers if applicable&#10;4. Avoid:&#10;   - Generic messages like &quot;Bug fix&quot; or &quot;Update file.txt&quot;&#10;   - Mentioning obvious details that can be seen in the diff&#10;&#10;Output:&#10;- Provide only the commit message, without any additional explanation or commentary.&#10;&#10;Output Structure:&#10;&lt;type&gt;[optional scope]: &lt;description&gt;&#10;[optional body]&#10;Example:&#10;   feat(api): add endpoint for user authentication&#10;Possible scopes (examples, infer from diff context):&#10;- api: app API-related code&#10;- ui: user interface changes&#10;- db: database-related changes&#10;- etc.&#10;Possible types:&#10;   - fix, use this if you think the code fixed something&#10;   - feat, use this if you think the code creates a new feature&#10;   - perf, use this if you think the code makes performance improvements&#10;   - docs, use this if you think the code does anything related to documentation&#10;   - refactor, use this if you think that the change is simple a refactor but the functionality is the same&#10;   - test, use this if this change is related to testing code (.spec, .test, etc)&#10;   - chore, use this for code related to maintenance tasks, build processes, or other non-user-facing changes. It typically includes tasks that don't directly impact the functionality but are necessary for the project's development and maintenance.&#10;   - ci, use this if this change is for CI related stuff&#10;   - revert, use this if im reverting something&#10;&#10;Note: The whole result should be given in {language} and the final result must not contain ‘```’&#10;" />
        </PromptInfo>
        <PromptInfo>
          <option name="description" value="Detailed" />
          <option name="prompt" value=" Generate a concise yet detailed git commit message using the following format and information:&#10;&#10; &lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;&#10;&#10; &lt;body&gt;&#10;&#10; &lt;footer&gt;&#10;&#10; Use the following placeholders in your analysis:&#10; - diff begin ：&#10; {diff}&#10; - diff end.&#10;&#10; Guidelines:&#10;&#10; 1. &lt;type&gt;: Commit type (required)&#10;    - Use standard types: feat, fix, docs, style, refactor, perf, test, chore&#10;&#10; 2. &lt;scope&gt;: Area of impact (required)&#10;    - Briefly mention the specific component or module affected&#10;&#10; 3. &lt;subject&gt;: Short description (required)&#10;    - Summarize the main change in one sentence (max 50 characters)&#10;    - Use the imperative mood, e.g., &quot;add&quot; not &quot;added&quot; or &quot;adds&quot;&#10;    - Don't capitalize the first letter&#10;    - No period at the end&#10;&#10; 4. &lt;body&gt;: Detailed description (required)&#10;    - Explain the motivation for the change&#10;    - Describe the key modifications (max 3 bullet points)&#10;    - Mention any important technical details&#10;    - Use the imperative mood&#10;&#10; 5. &lt;footer&gt;: (optional)&#10;    - Note any breaking changes&#10;    - Reference related issues or PRs&#10;&#10; Example:&#10;&#10; feat(user-auth): implement two-factor authentication&#10;&#10; • Add QR code generation for 2FA setup&#10; • Integrate Google Authenticator API&#10; • Update user settings for 2FA options&#10;&#10; Notes:&#10; - Keep the entire message under 300 characters&#10; - Focus on what and why, not how&#10; - Summarize diff to highlight key changes; don't include raw diff output&#10;&#10;Note: The whole result should be given in {language} and the final result must not contain ‘```’&#10;" />
        </PromptInfo>
        <PromptInfo>
          <option name="description" value="Perfect" />
          <option name="prompt" value="You are a Git commit message generation expert. Please analyze the following code changes and generate a clear, standardized commit message in {language}.&#10;&#10;Code changes:&#10;{diff}&#10;&#10;Requirements for the commit message:&#10;1. First line should start with one of these types:&#10;   feat: (new feature)&#10;   fix: (bug fix)&#10;   docs: (documentation)&#10;   style: (formatting)&#10;   refactor: (code refactoring)&#10;   perf: (performance)&#10;   test: (testing)&#10;   chore: (maintenance)&#10;&#10;2. First line should be no longer than 72 characters&#10;&#10;3. After the first line, leave one blank line and provide detailed explanation if needed:&#10;   - Why was this change necessary?&#10;   - How does it address the issue?&#10;   - Any breaking changes?&#10;&#10;4. Use present tense&#10;&#10;Please output only the commit message, without any additional explanations.&#10;" />
        </PromptInfo>
      </list>
    </option>
  </component>
</application>